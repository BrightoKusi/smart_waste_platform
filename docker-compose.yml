services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3 
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  simulator:
    build: ./simulator
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: python simulate_bin_data.py

  consumer:
    build: ./simulator
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    command: python consume_bin_data.py


  bin_alert_processor:
    build: ./simulator
    depends_on:
      kafka:
        condition: service_healthy
    env_file:
      - .env
    command: python bin_alert_processor.py

  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: md5 
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waste_user -d smart_waste"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  django:
    build: ./smart_waste_ui
    container_name: django_app
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./smart_waste_ui:/app 
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_NAME: smart_waste
      DB_USER: waste_user
      DB_PASSWORD: waste_pass
      DB_HOST: postgres
      DB_PORT: 5432
    

volumes:
  postgres_data: